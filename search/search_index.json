{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my github pages site Rename or change the content of this file at docs/content/index.md to get started creating project documentation Project Structure Makefile docs/ - content/ - index.md - Dockerfile - Makefile - mkdocs.yml Your documenation content is placed in docs/content . These are your markdown files and images. Standard markdown rules apply here. At docs/mkdocs.yml is your configuration for your https://www.mkdocs.org site_name: !ENV [SITE_NAME, \"my github pages site\"] site_url: !ENV [SITE_URL, \"\"] site_dir: !ENV [SITE_DIR, \"site\"] docs_dir: !ENV [DOCS_DIR, \"content\"] repo_url: !ENV [REPO_URL, \"\"] theme: material plugins: - search - macros: modules: [mkdocs-macros-file-include] nav: - \"Home\": \"index.md\" You can update the site attributes via the configuration site via the configuration files entries site_name: !ENV [SITE_NAME, \"my github pages site\"] site_url: !ENV [SITE_URL, \"\"] site_dir: !ENV [SITE_DIR, \"site\"] docs_dir: !ENV [DOCS_DIR, \"content\"] repo_url: !ENV [REPO_URL, \"\"] or override them via make make build_docs SITE_NAME=\"my github pages site\" Building Your Site This project is configured with a Make and has a few tasks created or added too your existing Makefile. Source export DOCS_DIR_NAME ?= content export DOCS_SRC ?= docs export PUBLISH_DIR ?= public export REPO_URL ?= https://example.com/repo export SITE_DIR ?= site export SITE_NAME ?= my github pages site export PROTOCOL ?= http export DOMAIN_NAME ?= 127.0.0.1:8000 export SITE_URL ?= $(PROTOCOL)://$(DOMAIN_NAME)/ export LOCAL_PORT ?= 8000 ifeq ($(OS),Windows_NT) SHELL := '/usr/bin/sh.exe' PWD := $(shell sh.exe -c pwd) else SHELL := /bin/bash endif export BASH_CMD := $(SHELL) -c export COMMIT_HASH ?= $(shell [[ -d \".git\" ]] && git rev-parse HEAD) export REPO_ROOT := $(shell [[ -z \"${CI}\" ]] && echo '/app' || echo $(PWD)) export VERSION ?= $(shell [[ -d \".git\" ]] && git tag --sort=committerdate | grep -E '[0-9]' | tail -1 || echo 0.0.0) export IMAGE_NAME ?= throw-away-builder export IMAGE_VERSION ?= latest export IMAGE_TAG = $(IMAGE_NAME):$(IMAGE_VERSION) export ADDITIONAL_BUILD_ARGS ?= export DOCS_SRC_PATH=$(REPO_ROOT)/$(DOCS_SRC) export PUBLISH_PATH := $(REPO_ROOT)/$(PUBLISH_DIR) export CONTENT_SITE_PATH=$(DOCS_SRC_PATH)/$(DOCS_DIR_NAME) export DOCS_SITE_PATH=$(DOCS_SRC_PATH)/$(SITE_DIR) ifdef CI export IMAGE_TAG= export DOCKER_COMMAND := else export DOCKER_COMMAND := docker run -it \\ -v $(PWD):$(REPO_ROOT) \\ --env CI=TRUE \\ --env COMMIT_HASH=$(COMMIT_HASH) \\ --env COMMIT_HASH_LENGTH=$(COMMIT_HASH_LENGTH) \\ --env CONTENT_SITE_PATH=$(CONTENT_SITE_PATH) \\ --env DOCS_DIR=$(DOCS_DIR_NAME) \\ --env DOCS_SITE_PATH=$(DOCS_SITE_PATH) \\ --env DOCS_SRC_PATH=$(DOCS_SRC_PATH) \\ --env LOCAL_PORT=$(LOCAL_PORT) \\ --env PUBLISH_PATH=$(PUBLISH_PATH) \\ --env REPO_ROOT=$(REPO_ROOT) \\ --env REPO_URL=$(REPO_URL) \\ --env SITE_DIR=$(SITE_DIR) \\ --env SITE_NAME=\"$(SITE_NAME)\" \\ --env SITE_URL=$(SITE_URL) \\ --name $(IMAGE_NAME) \\ --rm \\ -w $(DOCS_SRC_PATH) endif docs_clean: ## Removes the content artifacts directories and archive $(eval CMD := rm -rf $(SITE_DIR).zip && rm -rf $(SITE_DIR) && rm -rf $(DOCS_SITE_PATH) && rm -rf $(PUBLISH_PATH) ) @echo \"Cleaning $(SITE_DIR).zip & $(SITE_DIR) in $(SITE_DIR)\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_build: ## Builds the content to the 'site' directory $(eval CMD := build ) @echo \"Building\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_publish: ## Builds the content to the 'site' directory $(eval CMD := \\ mkdir -p $(PUBLISH_PATH) && \\ cp -R $(DOCS_SITE_PATH)/* $(PUBLISH_PATH)/ \\ ) @echo \"Publishing\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_debug: ## Runs the docker image interactively for debugging purposes @$(DOCKER_COMMAND) $(IMAGE_TAG) $(CMD) docs_docker_build: ## Build the docker image used for these make targets not within DIND docker build --pull $(ADDITIONAL_BUILD_ARGS) -t $(IMAGE_TAG) $(DOCS_SRC)/. -f $(DOCS_SRC)/Dockerfile docs_package: build_docs ## Builds the content to a compressed archive $(eval CMD := cd $(DOCS_SRC_PATH) && zip -r ../$(SITE_DIR).zip ./) @echo \"Packaging\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_serve: ## Runs the mkdocs server $(eval CMD := serve) $(DOCKER_COMMAND) -p $(LOCAL_PORT):$(LOCAL_PORT) --expose $(LOCAL_PORT) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' print-%: ; @echo $*=$($*) printenv: printenv | sort Build To build your static site run the following make build_docs Serve To serve your static site run the following on a liveload server on 127.0.0.0:8000 run the following make serve_docs Or to run it on an alternate port using the following (replacing 8888 with your desired value) make serve_docs LOCAL_PORT=8888 Built using Docker This documentation build tool lives in a docker container and is called from a Makefile for local building and serving. You can also use this in CI. Source FROM debian:latest ENV PYTHONUNBUFFERED=1 RUN apt-get update && \\ apt-get install -y -qq \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ gnupg-agent \\ lsb-release \\ python3 \\ python3-pip \\ rsync \\ software-properties-common \\ tar \\ zip # Docker apt repo RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - RUN add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" RUN apt-get update && apt-get install -y docker-ce docker-ce-cli # https://www.mkdocs.org/ https://mkdocs-macros-plugin.readthedocs.io/ https://squidfunk.github.io/mkdocs-material/ RUN pip3 install --no-cache --upgrade pip setuptools RUN pip3 install mkdocs mkdocs-macros-plugin mkdocs-material RUN FILE=theme.list && \\ echo 'mkdocs' >> /$FILE && \\ echo 'readthedocs' >> /$FILE && \\ echo 'material' >> /$FILE # //TODO setup this repo to be a pip package RUN cd /tmp && \\ git clone https://gitlab.com/motowilliams/mkdocs-macros-file-include.git && \\ cd mkdocs-macros-file-include && \\ python3 setup.py install && \\ cd / && \\ rm -rf /tmp/ # these used to be added as files - heredocs would be useful but we don't know # if the users CI / local setup will support it RUN echo \"Creating wrapper scripts\" && \\ SCRIPT=/usr/local/bin/build && \\ echo '#!/usr/bin/env bash' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Setting directory to $DOCS_SRC_PATH\"' >> $SCRIPT && \\ echo 'cd $DOCS_SRC_PATH' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Building documentation site\"' >> $SCRIPT && \\ echo 'mkdocs build' >> $SCRIPT && \\ chmod 755 $SCRIPT && \\ SCRIPT=/usr/local/bin/serve && \\ echo '#!/usr/bin/env bash' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Setting directory to $DOCS_SRC_PATH\"' >> $SCRIPT && \\ echo 'cd $DOCS_SRC_PATH' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Serving documentation site on port $LOCAL_PORT\"' >> $SCRIPT && \\ echo 'mkdocs serve -v --dev-addr=0.0.0.0:$LOCAL_PORT' >> $SCRIPT && \\ chmod 755 $SCRIPT","title":"Home"},{"location":"#welcome-to-my-github-pages-site","text":"Rename or change the content of this file at docs/content/index.md to get started creating project documentation","title":"Welcome to my github pages site"},{"location":"#project-structure","text":"Makefile docs/ - content/ - index.md - Dockerfile - Makefile - mkdocs.yml Your documenation content is placed in docs/content . These are your markdown files and images. Standard markdown rules apply here. At docs/mkdocs.yml is your configuration for your https://www.mkdocs.org site_name: !ENV [SITE_NAME, \"my github pages site\"] site_url: !ENV [SITE_URL, \"\"] site_dir: !ENV [SITE_DIR, \"site\"] docs_dir: !ENV [DOCS_DIR, \"content\"] repo_url: !ENV [REPO_URL, \"\"] theme: material plugins: - search - macros: modules: [mkdocs-macros-file-include] nav: - \"Home\": \"index.md\" You can update the site attributes via the configuration site via the configuration files entries site_name: !ENV [SITE_NAME, \"my github pages site\"] site_url: !ENV [SITE_URL, \"\"] site_dir: !ENV [SITE_DIR, \"site\"] docs_dir: !ENV [DOCS_DIR, \"content\"] repo_url: !ENV [REPO_URL, \"\"] or override them via make make build_docs SITE_NAME=\"my github pages site\"","title":"Project Structure"},{"location":"#building-your-site","text":"This project is configured with a Make and has a few tasks created or added too your existing Makefile.","title":"Building Your Site"},{"location":"#source","text":"export DOCS_DIR_NAME ?= content export DOCS_SRC ?= docs export PUBLISH_DIR ?= public export REPO_URL ?= https://example.com/repo export SITE_DIR ?= site export SITE_NAME ?= my github pages site export PROTOCOL ?= http export DOMAIN_NAME ?= 127.0.0.1:8000 export SITE_URL ?= $(PROTOCOL)://$(DOMAIN_NAME)/ export LOCAL_PORT ?= 8000 ifeq ($(OS),Windows_NT) SHELL := '/usr/bin/sh.exe' PWD := $(shell sh.exe -c pwd) else SHELL := /bin/bash endif export BASH_CMD := $(SHELL) -c export COMMIT_HASH ?= $(shell [[ -d \".git\" ]] && git rev-parse HEAD) export REPO_ROOT := $(shell [[ -z \"${CI}\" ]] && echo '/app' || echo $(PWD)) export VERSION ?= $(shell [[ -d \".git\" ]] && git tag --sort=committerdate | grep -E '[0-9]' | tail -1 || echo 0.0.0) export IMAGE_NAME ?= throw-away-builder export IMAGE_VERSION ?= latest export IMAGE_TAG = $(IMAGE_NAME):$(IMAGE_VERSION) export ADDITIONAL_BUILD_ARGS ?= export DOCS_SRC_PATH=$(REPO_ROOT)/$(DOCS_SRC) export PUBLISH_PATH := $(REPO_ROOT)/$(PUBLISH_DIR) export CONTENT_SITE_PATH=$(DOCS_SRC_PATH)/$(DOCS_DIR_NAME) export DOCS_SITE_PATH=$(DOCS_SRC_PATH)/$(SITE_DIR) ifdef CI export IMAGE_TAG= export DOCKER_COMMAND := else export DOCKER_COMMAND := docker run -it \\ -v $(PWD):$(REPO_ROOT) \\ --env CI=TRUE \\ --env COMMIT_HASH=$(COMMIT_HASH) \\ --env COMMIT_HASH_LENGTH=$(COMMIT_HASH_LENGTH) \\ --env CONTENT_SITE_PATH=$(CONTENT_SITE_PATH) \\ --env DOCS_DIR=$(DOCS_DIR_NAME) \\ --env DOCS_SITE_PATH=$(DOCS_SITE_PATH) \\ --env DOCS_SRC_PATH=$(DOCS_SRC_PATH) \\ --env LOCAL_PORT=$(LOCAL_PORT) \\ --env PUBLISH_PATH=$(PUBLISH_PATH) \\ --env REPO_ROOT=$(REPO_ROOT) \\ --env REPO_URL=$(REPO_URL) \\ --env SITE_DIR=$(SITE_DIR) \\ --env SITE_NAME=\"$(SITE_NAME)\" \\ --env SITE_URL=$(SITE_URL) \\ --name $(IMAGE_NAME) \\ --rm \\ -w $(DOCS_SRC_PATH) endif docs_clean: ## Removes the content artifacts directories and archive $(eval CMD := rm -rf $(SITE_DIR).zip && rm -rf $(SITE_DIR) && rm -rf $(DOCS_SITE_PATH) && rm -rf $(PUBLISH_PATH) ) @echo \"Cleaning $(SITE_DIR).zip & $(SITE_DIR) in $(SITE_DIR)\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_build: ## Builds the content to the 'site' directory $(eval CMD := build ) @echo \"Building\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_publish: ## Builds the content to the 'site' directory $(eval CMD := \\ mkdir -p $(PUBLISH_PATH) && \\ cp -R $(DOCS_SITE_PATH)/* $(PUBLISH_PATH)/ \\ ) @echo \"Publishing\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_debug: ## Runs the docker image interactively for debugging purposes @$(DOCKER_COMMAND) $(IMAGE_TAG) $(CMD) docs_docker_build: ## Build the docker image used for these make targets not within DIND docker build --pull $(ADDITIONAL_BUILD_ARGS) -t $(IMAGE_TAG) $(DOCS_SRC)/. -f $(DOCS_SRC)/Dockerfile docs_package: build_docs ## Builds the content to a compressed archive $(eval CMD := cd $(DOCS_SRC_PATH) && zip -r ../$(SITE_DIR).zip ./) @echo \"Packaging\" $(DOCKER_COMMAND) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' docs_serve: ## Runs the mkdocs server $(eval CMD := serve) $(DOCKER_COMMAND) -p $(LOCAL_PORT):$(LOCAL_PORT) --expose $(LOCAL_PORT) $(IMAGE_TAG) $(BASH_CMD) '$(CMD)' print-%: ; @echo $*=$($*) printenv: printenv | sort","title":"Source"},{"location":"#build","text":"To build your static site run the following make build_docs","title":"Build"},{"location":"#serve","text":"To serve your static site run the following on a liveload server on 127.0.0.0:8000 run the following make serve_docs Or to run it on an alternate port using the following (replacing 8888 with your desired value) make serve_docs LOCAL_PORT=8888","title":"Serve"},{"location":"#built-using-docker","text":"This documentation build tool lives in a docker container and is called from a Makefile for local building and serving. You can also use this in CI.","title":"Built using Docker"},{"location":"#source_1","text":"FROM debian:latest ENV PYTHONUNBUFFERED=1 RUN apt-get update && \\ apt-get install -y -qq \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ gnupg-agent \\ lsb-release \\ python3 \\ python3-pip \\ rsync \\ software-properties-common \\ tar \\ zip # Docker apt repo RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - RUN add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" RUN apt-get update && apt-get install -y docker-ce docker-ce-cli # https://www.mkdocs.org/ https://mkdocs-macros-plugin.readthedocs.io/ https://squidfunk.github.io/mkdocs-material/ RUN pip3 install --no-cache --upgrade pip setuptools RUN pip3 install mkdocs mkdocs-macros-plugin mkdocs-material RUN FILE=theme.list && \\ echo 'mkdocs' >> /$FILE && \\ echo 'readthedocs' >> /$FILE && \\ echo 'material' >> /$FILE # //TODO setup this repo to be a pip package RUN cd /tmp && \\ git clone https://gitlab.com/motowilliams/mkdocs-macros-file-include.git && \\ cd mkdocs-macros-file-include && \\ python3 setup.py install && \\ cd / && \\ rm -rf /tmp/ # these used to be added as files - heredocs would be useful but we don't know # if the users CI / local setup will support it RUN echo \"Creating wrapper scripts\" && \\ SCRIPT=/usr/local/bin/build && \\ echo '#!/usr/bin/env bash' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Setting directory to $DOCS_SRC_PATH\"' >> $SCRIPT && \\ echo 'cd $DOCS_SRC_PATH' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Building documentation site\"' >> $SCRIPT && \\ echo 'mkdocs build' >> $SCRIPT && \\ chmod 755 $SCRIPT && \\ SCRIPT=/usr/local/bin/serve && \\ echo '#!/usr/bin/env bash' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Setting directory to $DOCS_SRC_PATH\"' >> $SCRIPT && \\ echo 'cd $DOCS_SRC_PATH' >> $SCRIPT && \\ echo >> $SCRIPT && \\ echo 'echo \"Serving documentation site on port $LOCAL_PORT\"' >> $SCRIPT && \\ echo 'mkdocs serve -v --dev-addr=0.0.0.0:$LOCAL_PORT' >> $SCRIPT && \\ chmod 755 $SCRIPT","title":"Source"}]}